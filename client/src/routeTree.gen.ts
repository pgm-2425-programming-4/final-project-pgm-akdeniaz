/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as ProjectsProjectIdRouteImport } from './routes/projects/$projectId'
import { Route as TasksTaskIdTaskIdRouteImport } from './routes/tasks_/$taskId/$taskId'
import { Route as ProjectsProjectIdBacklogRouteImport } from './routes/projects_/$projectId/backlog'

const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectIdRoute = ProjectsProjectIdRouteImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTaskIdTaskIdRoute = TasksTaskIdTaskIdRouteImport.update({
  id: '/tasks_/$taskId/$taskId',
  path: '/tasks/$taskId/$taskId',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectIdBacklogRoute =
  ProjectsProjectIdBacklogRouteImport.update({
    id: '/projects_/$projectId/backlog',
    path: '/projects/$projectId/backlog',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId/backlog': typeof ProjectsProjectIdBacklogRoute
  '/tasks/$taskId/$taskId': typeof TasksTaskIdTaskIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/projects': typeof ProjectsIndexRoute
  '/projects/$projectId/backlog': typeof ProjectsProjectIdBacklogRoute
  '/tasks/$taskId/$taskId': typeof TasksTaskIdTaskIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/projects/': typeof ProjectsIndexRoute
  '/projects_/$projectId/backlog': typeof ProjectsProjectIdBacklogRoute
  '/tasks_/$taskId/$taskId': typeof TasksTaskIdTaskIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/projects/$projectId'
    | '/projects'
    | '/projects/$projectId/backlog'
    | '/tasks/$taskId/$taskId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/projects/$projectId'
    | '/projects'
    | '/projects/$projectId/backlog'
    | '/tasks/$taskId/$taskId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/projects/$projectId'
    | '/projects/'
    | '/projects_/$projectId/backlog'
    | '/tasks_/$taskId/$taskId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  ProjectsProjectIdBacklogRoute: typeof ProjectsProjectIdBacklogRoute
  TasksTaskIdTaskIdRoute: typeof TasksTaskIdTaskIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks_/$taskId/$taskId': {
      id: '/tasks_/$taskId/$taskId'
      path: '/tasks/$taskId/$taskId'
      fullPath: '/tasks/$taskId/$taskId'
      preLoaderRoute: typeof TasksTaskIdTaskIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects_/$projectId/backlog': {
      id: '/projects_/$projectId/backlog'
      path: '/projects/$projectId/backlog'
      fullPath: '/projects/$projectId/backlog'
      preLoaderRoute: typeof ProjectsProjectIdBacklogRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  ProjectsProjectIdRoute: ProjectsProjectIdRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  ProjectsProjectIdBacklogRoute: ProjectsProjectIdBacklogRoute,
  TasksTaskIdTaskIdRoute: TasksTaskIdTaskIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
